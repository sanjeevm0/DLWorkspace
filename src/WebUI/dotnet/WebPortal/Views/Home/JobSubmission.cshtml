@{
    ViewData["Title"] = "Submit Your Job";
}

<script type="text/javascript">
    
    function AlertAPIError(xhr, ajaxOptions, thrownError) {
        alert("Restful API Error: \n" + JSON.stringify(thrownError));
    }

    function AlertAPIResult(payload) {
        alert(payload.message);
    }

    function buildTemplateList() {
        $.ajax({ url: "/api/dlws/GetTemplates?type=job", dataType: 'json', timeout: 10000, error: AlertAPIError }).done(
            function (json) {
                $('#templateselect').find("option").remove();
                for (var i = 0; i < json.length; i++) {
                    var row = $("<option>" + json[i].Name + "</option>");
                    row.attr("value", JSON.stringify(json[i]));
                    $('#templateselect').append(row);
                }
            });
    }

    $(document).ready(function () {
        buildTemplateList();
        $('#submit_job').on('submit', function (e) { //use on if jQuery 1.7+
            e.preventDefault();  //prevent form from submitting
            var params = "";

            var jobname = $("#jobname").val().trim();
            var workpath = encodeURIComponent($("#workpath").val().trim());
            var datapath = encodeURIComponent($("#datapath").val().trim());
            var jobpath = encodeURIComponent($("#jobpath").val().trim());
            var image = encodeURIComponent($("#image").val().trim());
            var cmd = encodeURIComponent($("#cmd").val().trim());
            var logdir = encodeURIComponent($("#logdir").val().trim());
            var interactiveport = encodeURIComponent($("#interactivePort").val().trim());


            var numGPUsInt = parseInt($('#resourcegpu').val());
            var numGPUStr = $('#resourcegpu').val();


            //var jobtrainingtype = encodeURIComponent($("#jobtrainingtype").val().trim());


            var radios = document.getElementsByName('jobtrainingtype');

            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    var jobtrainingtype = encodeURIComponent(radios[i].value.trim());
                    break;
                }
            }

            var numps = parseInt($('#numps').val());
            var numpsworker = parseInt($('#numpsworker').val());
            var nummpiworker = parseInt($('#nummpiworker').val());


            if (numGPUsInt < 0 || numGPUsInt > 8) {
                alert("Invalid GPU number:" + numGPUStr + ". GPU number has to be 0 - 8 in regular job");
                return;
            }

            if (jobname == "") {
                alert("Job Name cannot be empty!");
                return;
            }
            if (workpath == "") {
                alert("Work Path cannot be empty!");
                return;
            }
            if (datapath == "") {
                alert("Data Path cannot be empty!");
                return;
            }

            if (image == "") {
                alert("Docker Image cannot be empty!");
                return;
            }

            if (cmd == "") {
                alert("Default CMD in docker image:" + image + ". will be executed");
            }

            params = params + "resourcegpu=" + numGPUStr + "&";
            params = params + "jobName=" + jobname + "&";
            params = params + "workPath=" + workpath + "&";
            params = params + "dataPath=" + datapath + "&";

            var jobpath = $('#jobpath').val();
            if (jobpath != "") {
                params = params + "jobPath=" + jobpath + "&";
            }

            params = params + "image=" + image + "&";
            params = params + "cmd=" + cmd + "&";

            var logdir = $('#logdir').val();
            if (logdir != "") {
                params = params + "logDir=" + logdir + "&";
            }

            if (interactiveport != "") {
                params = params + "interactivePort=" + interactiveport + "&";
            }

            params = params + "jobType=training&";
            params = params + "jobtrainingtype=" + jobtrainingtype + "&";

            if (jobtrainingtype == "PSDistJob") {
                params = params + "numps=" + numps + "&";
                params = params + "numpsworker=" + numpsworker + "&";
            }

            if (jobtrainingtype == "MPIDistJob") {
                params = params + "nummpiworker=" + nummpiworker + "&";
            }



            var runningasroot = document.getElementById("runningasroot").checked ? "1" : "0";
            params = params + "runningasroot=" + runningasroot + "&";

            var url = "/api/dlws/SubmitJob?" + params;

            console.log(url);
            $("#submit").attr("disabled", true);

            $.ajax({
                url: url,
                dataType: 'json',
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("RestfulAPI error!");
                    $("#submit").attr("disabled", false);
                },
                timeout: 10000 //10 second timeout
            }).done(
                function (payload) {
                    console.log(payload);
                    if (payload.jobId) {
                        alert("Job Submitted! \n Job ID:" + payload.jobId)
                        location.href = "/Home/ViewJobs";
                    } else if (payload.error) {
                        alert("Error: " + payload.error, "Alert");
                        $("#submit").attr("disabled", false);
                    } else {
                        alert("Unexpected error: " + payload, "Alert");
                        $("#submit").attr("disabled", false);
                    }

                });

        });
    });

    function ShowHideDiv(chkbox, divId) {
        var elem = document.getElementById(divId);
        elem.style.display = chkbox.checked ? "block" : "none";
    }

    function ShowRegularJob() {
        var elem2 = document.getElementById("PSDistJob");
        elem2.style.display = "none";
    }

    function ShowPSDistJob() {
        var elem2 = document.getElementById("PSDistJob");
        elem2.style.display = "block";
    }

    function replaceViewData(str) {
        str = str.replace(/\$\$username\$\$/g, "@ViewData["Username"]");
        str = str.replace(/\$\$gid\$\$/g, "@ViewData["gid"]");
        str = str.replace(/\$\$uid\$\$/g, "@ViewData["uid"]");
        return str;
    }

    function subViewData(str) {
        str = str.replace(new RegExp("@ViewData["Username"]", 'g'), "$$$$username$$$$");
        str = str.replace(new RegExp("@ViewData["gid"]", 'g'), "$$$$gid$$$$");
        str = str.replace(new RegExp("@ViewData["uid"]", 'g'), "$$$$uid$$$$");
        return str;
    }

    function makeTemplate() {
        var template = {};
        template.job_name = document.getElementById("jobname").value;
        template.gpu_count = document.getElementById("resourcegpu").value;
        template.work_path = document.getElementById("workpath").value;
        template.data_path = document.getElementById("datapath").value;
        template.job_path = document.getElementById("jobpath").value;
        template.image = document.getElementById("image").value;
        template.cmd = document.getElementById("cmd").value;
        template.is_interactive = document.getElementById("chkInteractiveJob").checked;
        template.do_log = document.getElementById("chkLogDir").checked;
        template.port = document.getElementById("interactivePort").value;
        template.log_path = document.getElementById("logdir").value;
        template.run_as_root = document.getElementById("runningasroot").checked;
        return template;
    }

    function UseTemplate(templateValueString) {
        var templateValue = JSON.parse(templateValueString);
        var settings = JSON.parse(templateValue.Json);
        var master = templateValue.Database === "Master";
        document.getElementsByName("templatelocation")[0].checked = !(templateValue.Database === undefined) && master;
        document.getElementsByName("templatelocation")[1].checked = !(templateValue.Database === undefined) && !master;
        document.getElementById("templateName").value = templateValue.Name;
        document.getElementById("jobname").value = (settings.job_name === undefined) ? "" : settings.job_name;
        document.getElementById("resourcegpu").value = (settings.gpu_count === undefined) ? 0 : settings.gpu_count;
        document.getElementById("workpath").value = (settings.work_path === undefined) ? "@ViewData["Username"]" : settings.work_path;
        document.getElementById("datapath").value = (settings.data_path === undefined) ? "imagenet" : settings.data_path;
        document.getElementById("jobpath").value = (settings.job_path === undefined) ? "" : settings.job_path;
        document.getElementById("image").value = (settings.image === undefined) ? "" : settings.image;
        document.getElementById("cmd").value = (settings.cmd === undefined) ? "" : (document.getElementById("submitModalLabel").innerHTML == "Manage Templates" ? settings.cmd : replaceViewData(settings.cmd));
        document.getElementById("chkInteractiveJob").checked = settings.is_interactive;
        document.getElementById("chkLogDir").checked = settings.do_log;
        ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield');
        ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield');
        document.getElementById("interactivePort").value = (settings.port === undefined) ? "8888" : settings.port;
        document.getElementById("logdir").value = (settings.log_path === undefined) ? "" : settings.log_path;
        document.getElementById("runningasroot").checked = settings.run_as_root;
    }

    function SwitchToTemplates() {
        document.getElementById("submitModalLabel").innerHTML = "Manage Templates";
        document.getElementById("templateSection").style.display = "block";
        document.getElementById("templateFooter").style.display = "block";
        document.getElementById("jobFooter").style.display = "none";
        document.getElementById("cmd").value = subViewData(document.getElementById("cmd").value);
        document.getElementById("templateDatabaseSection").style.display = "block";
    }

    function SaveTemplateAPI(params) {
        var url = "/api/dlws/submit";
        $.ajax({ url: url, method: 'POST', data: params, error: AlertAPIError, timeout: 10000 }).done();
    }
    
    function SaveTemplate() {
        var templatename = encodeURIComponent($("#templateName").val().trim());
        if (templatename == "") {
            alert("Template Name cannot be empty!");
            return;
        }
        var params = {};
        params.Name = templatename;
        params.Json = JSON.stringify(makeTemplate());

        if (document.getElementById("locationdiv").style.display == "block") {
            var radios = document.getElementsByName('templatelocation');

            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    params.Database = radios[i].value;
                    break;
                }
            }
        }
        SaveTemplateAPI(params);
    }

    function DeleteTemplate() {
        var templatename = $("#templateName").val().trim();
        if (templatename == "") {
            alert("Template Name cannot be empty!");
            return;
        }
        var params = "";
        params = params + "name=" + templatename + "&";
        if (document.getElementById("locationdiv").style.display == "block") {
            var radios = document.getElementsByName('templatelocation');

            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    params = params + "location=" + radios[i].value + "&";
                    break;
                }
            }
        }
        var url = "/api/dlws/DeleteTemplate?" + params;
        $.ajax({ url: url, dataType: 'json', error: AlertAPIError, timeout: 10000 }).done(AlertAPIResult);
    }

</script>

@* Manage Database Download/Upload Section *@
<script type="text/javascript">
    
    function DownloadFile(json) {
        var str = JSON.stringify(json);
        var file = new Blob([str], { type: "text/plain" });
        var filename = "Templates.json";
        if (window.navigator.msSaveOrOpenBlob){
            window.navigator.msSaveOrOpenBlob(file, filename);
        }
        else {
            var a = document.createElement("a");
            var url = URL.createObjectURL(file);
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            setTimeout(function() {
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                },
                0);
        }
    }  
    
    function DownloadDatabase() {
        var e = document.getElementById("databaseselect");
        var params = "location=" + e.options[e.selectedIndex].value + "&";
        var url = "/api/dlws/GetDatabase?" + params;
        $.ajax({ url: url, dataType: 'json', error: AlertAPIError, timeout: 10000 }).done(DownloadFile);
    }
    
    function UploadDatabase() {
        var fileToLoad = document.getElementById("fileInput").files[0];
        var fileReader = new FileReader();
        fileReader.onload = function (fileLoadedEvent) {
            var textFromFileLoaded = fileLoadedEvent.target.result;
            var templateArray = JSON.parse(textFromFileLoaded);
            for (var i = 0, length = templateArray.length; i < length; i++) {
                var params = {};
                params.Name = templateArray[i].Name;
                params.Username = templateArray[i].Username;
                params.Json = templateArray[i].Json;
                var e = document.getElementById("databaseselect");
                params.Database = e.options[e.selectedIndex].value;
                SaveTemplateAPI(params);
            }
        }
        fileReader.readAsText(fileToLoad, "UTF-8");
    }
    
    function ChooseFile() {
        $("#fileInput").click();
        $("#fileInput").attr("value", "");
    }
    
</script>

<div class="modal-dialog" role="document">
    <div class="modal-content">
        <form method="POST" id="submit_job">

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="submitModalLabel">@((ViewData["Mode"].Equals("Templates"))?"Manage Templates":"Submit Job")</h4>
            </div>

            <div class="modal-body">

                <div class="form-group">
                    <label>
                        Use Template
                    </label>
                    <br />
                    <select onchange="UseTemplate(this.value)" id="templateselect"></select>
                </div>

                <div class="form-group">
                    <label>
                        Job Type
                    </label>
                    <br />
                    <input type="radio" name="jobtrainingtype" id="jobtrainingtype" value="RegularJob" checked="checked" onclick="ShowRegularJob()" /> Regular Training Job
                    <br />
                    <input type="radio" name="jobtrainingtype" id="jobtrainingtype" value="PSDistJob" onclick="ShowPSDistJob()" /> Distributed Training Job
                    <br />
                </div>

                <div class="form-group">
                    <label>
                        Job Name
                    </label>
                    <input type="text" class="form-control" id="jobname" />
                </div>

                <div class="form-group">
                    <label>
                        Number of GPUs
                    </label>
                    <input type="number" class="form-control" id="resourcegpu" value="0" />
                </div>

                <div id="PSDistJob" hidden>
                    <div class="form-group">
                        <label>
                            Number of Parameter Servers
                        </label>
                        <input type="number" class="form-control" id="numps" value="1" />
                    </div>
                    <div class="form-group">
                        <label>
                            Number of Workers
                        </label>
                        <input type="number" class="form-control" id="numpsworker" value="1" />
                    </div>
                </div>

                <div class="form-group">
                    <label>
                        Work Directory <font face="verdana" color="#A9A9A9">(relative to <a href="@ViewData["workPath"]">@ViewData["workPath"].ToString().Replace("file:", "").Replace("/", "\\") </a>).  </font> <br /> <font face="verdana" color="#A9A9A9"> This folder is mounted as <b>/work</b> inside container.</font>
                    </label>
                    <input type="text" class="form-control" id="workpath" />
                </div>

                <div class="form-group">
                    <label>
                        Data Directory <font face="verdana" color="#A9A9A9">(relative to <a href="@ViewData["dataPath"]">@ViewData["dataPath"].ToString().Replace("file:", "").Replace("/", "\\") </a>). </font> <br /> <font face="verdana" color="#A9A9A9"> This folder is mounted as <b>/data</b> inside container.</font>
                    </label>
                    <input type="text" class="form-control" id="datapath" />
                </div>

                <div class="form-group">
                    <label>
                        Job Directory (empty by default) <br /> <font face="verdana" color="#A9A9A9"> This folder is mounted as <b>/job</b> inside container.</font>
                    </label>
                    <input type="text" class="form-control" id="jobpath" />
                </div>

                <div class="form-group">
                    <label>
                        Docker Image
                    </label>
                    <input list="imagelist" class="form-control" name="image" id="image" />
                    <datalist id="imagelist">
                        <option value="mlcloudreg.westus.cloudapp.azure.com:5000/philly/agi-tf-0.12.1-src-ubuntu-16.04:latest" />
                        <option value="mlcloudreg.westus.cloudapp.azure.com:5000/philly/agi-tf-1.1.0-src-ubuntu-16.04:latest" />
                        <option value="mlcloudreg.westus.cloudapp.azure.com:5000/philly/agi-tf-pytorch-0.12.1-src-ubuntu-16.04:latest" />
                    </datalist>
                </div>

                <div class="form-group">
                    <label>
                        Training Command
                    </label>
                    <textarea type="text" class="form-control" id="cmd" rows="5"> </textarea>
                </div>

                <div class="form-group">
                    <input type="checkbox" id="chkLogDir" onclick="ShowHideDiv(this,'logdirfield')" />
                    <label>
                        Enable TensorBoard
                    </label>
                    <div id="logdirfield" hidden>
                        <label>Model path:</label>
                        <input type="text" class="form-control" id="logdir" />
                    </div>
                </div>

                <div class="form-group">
                    <input type="checkbox" id="chkInteractiveJob" onclick="ShowHideDiv(this, 'interactiveportfield')" />
                    <label>
                        Interactive Job? (e.g. ipython, ssh)
                    </label>
                    <div id="interactiveportfield" hidden>
                        <label>Port used by interactive job:</label>
                        <input type="text" class="form-control" id="interactivePort" />
                    </div>
                </div>

                <div class="form-group">
                    <input type="checkbox" id="runningasroot" />
                    <label>
                        Running as ROOT. (e.g. for ssh jobs)
                    </label>
                </div>

                <div id="templateSection" class="form-group" style="display: @(ViewData["Mode"].Equals("Templates") ? "block" : "none")">

                    <hr>
                    <h4 class="modal-title" id="submitModalLabel">Template Settings</h4>

                    <div class="form-group">
                        <label>Name:</label>
                        <input type="text" class="form-control" id="templateName" />
                    </div>

                    <div class="form-group" style="display: @(ViewData["isAdmin"].Equals("true") ? "block" : "none")" id="locationdiv">
                        <label>
                            Template Location
                        </label>
                        <br />
                        <input type="radio" name="templatelocation" id="templatelocation" value="Master"/> Master Template Database
                        <br />
                        <input type="radio" name="templatelocation" id="templatelocation" value="CurrentCluster"/> Current Cluster Template Database (@ViewData["cluster"])
                        <br />
                    </div>

                </div>

            </div>

            <div class="modal-footer">
                <div id="templateFooter" style="display: @(ViewData["Mode"].Equals("Templates") ? "block" : "none")">
                    <a onclick="DeleteTemplate()" class="btn btn-success" href="#">Delete Template</a>
                    <a onclick="SaveTemplate()" class="btn btn-success" href="#">Save Template</a>
                </div>
                <div id="jobFooter" style="display: @(ViewData["Mode"].Equals("Templates") ? "none" : "block")">
                    <a onclick="SwitchToTemplates()" class="btn btn-success" href="#">Manage Template</a>
                    <input type="submit" value="Submit" name="submit" class="btn btn-success" id="submit" />
                </div>
            </div>
        </form>
    </div>
    
    <br/>

    <div class="modal-content" style="display: @(ViewData["Mode"].Equals("Templates") ? "block" : "none")" id="templateDatabaseSection">
        <form method="POST" id="submit_job">
            <div class="modal-header">
                <h4 class="modal-title" id="templateDatabaseModalLabel">Template Database</h4>
            </div>
            
            <div class="modal-body">
                <div class="form-group">
                    <label>
                        Selet Database
                    </label>
                    <br />
                    <select id="databaseselect">
                        <option value="Master">Master Template</option>
                        <option value="CurrentCluster">Current Cluster (@ViewData["cluster"])</option>
                    </select>
                </div>
            </div>
            
            <div class="modal-footer">
                <a onclick="DownloadDatabase()" class="btn btn-success" href="#">Download JSON</a>
                <a onclick="ChooseFile()" class="btn btn-success" href="#">Upload JSON</a>
            </div>
        </form>
    </div>
</div>

<div style="height: 0px; overflow: hidden">
    <input type="file" id="fileInput" name="fileInput" onchange="UploadDatabase()"/>
</div>
