@{
    ViewData["Title"] = "Submit Your Job";
}
<style>

    .tooltip {
        position: relative;
        display: inline-block;
        font-size: 24px;
    }

        .tooltip .tooltiptext {
            visibility: hidden;
            background-color: black;
            color: #fff;
            text-align: center;
            padding: 5px 0;
            border-radius: 6px;
            position: absolute;
            z-index: 1;
            width: 120px;
            top: 100%;
            left: 50%;
            margin-left: -60px;
            font-size: 36px;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
        }
    }


    /* remove bottom-margin of inputs */

    .editable-wrap .editable-controls > input,
    .editable-wrap .editable-controls > select,
    .editable-wrap .editable-controls > textarea {
        width: 100%;
    }


</style>

<script type="text/javascript">

    var app = angular.module('jobApp', ["xeditable", "ui.select"]);

    app.run(function (editableOptions) {
        editableOptions.theme = 'bs3';
    });

    app.controller('jobCtrl', function ($scope, $http, $log, $filter) {
        var tolist = function (info) {
            if (typeof info === 'string' || info instanceof String)
                return [info];
            else if (info)
                return info;
            else
                return [];
        };

        var tobool = function (sec, property, defValue) {
            if (!(sec.hasOwnProperty(property))) {
                sec[property] = defValue;
            }
            if (typeof (sec[property]) == "string") {
                var firstchar = sec[property].trim().toLowerCase()[0];
                sec[property] == (firstchar == 't' || firstchar == 'y');
            }
            return sec[property];
        }

        $scope.toggle01 = function (sec, property, defValue) {
            if (!(sec.hasOwnProperty(property))) {
                sec[property] = defValue;
            }
            if (sec[property] == '0')
                sec[property] = '1';
            else
                sec[property] = '0';
        };

        $scope.checkCurrent = function () {
            if ($scope.current == null)
                $scope.current = {};
            tobool($scope.current, "do_log", false);
            if (!$scope.current.hasOwnProperty("runningasroot"))
                $scope.current.runningasroot = "0"; 
            if (typeof ($scope.current.runningasroot) == "boolean")
            {
                if ($scope.current.runningasroot)
                    $scope.current.runningasroot = "1";
                else 
                    $scope.current.runningasroot = "0";
            };
            if ($scope.current.runningasroot != "0" && $scope.current.runningasroot != "1")
                $scope.current.runningasroot = "0"; 
            
            tobool($scope.current, "is_interactive", false);
            if ($scope.current.mountpoints == null) {
                $scope.current.mountpoints = [];
            };
            if ($scope.current.env == null) {
                $scope.current.env = [];
            };
        };

        var parseMounts = function (mountpoints, mountdescription, username, mounthomefolder, deploymounts) {
            var mounts = [];
            var homefolderDescription = "";
            for (var sharename in mountpoints) {
                if (mountpoints.hasOwnProperty(sharename)) {
                    sharemounts = mountpoints[sharename].mountpoints;
                    mountlist = tolist(sharemounts);
                    var nIsRoot = -1; 
                    for (var i in mountlist) {
                        if (mountlist[i] == "")
                        {
                            nIsRoot = i;
                        };
                    };
                    if (nIsRoot >=0)
                    {
                        mountlist.splice(nIsRoot, 1, "jobfiles", "storage", "work");
                    }

                    validmountlist = [];
                    for (var i in mountlist) {
                        var onemount = mountlist[i];
                        // System share is not processed
                        if (onemount != "" && onemount != "jobfiles" && onemount != "storage" && onemount != "work") {
                            var mts = tolist(deploymounts);
                            var mtsIndex = mts.indexOf(onemount);
                            if ( mtsIndex >= 0)
                            {
                                validmountlist.push(onemount);
                            }
                        }
                        else
                        {
                            /*
                            var shareType = mountpoints[sharename].type;
                            var description = mountdescription[shareType];
                            var hostPath = "/dlwsdata" + onemount;
                            var containerPath = "/" + onemount;
                            if (onemount == "jobfiles")
                                containerPath = "/job";
                            mounts = mounts.concat({ "containerPath": containerPath, "hostPath": hostPath, "description": description, "enabled": true });
                            */
                        }
                        if (onemount == "" || onemount == "work")
                        {
                            var shareType = mountpoints[sharename].type;
                            homefolderDescription = mountdescription[shareType];
                        }
                    };
                    if (validmountlist.length > 0)
                    {
                        for (var i in validmountlist) {
                            var onemount = validmountlist[i];
                            var publicshareinfo = tolist(mountpoints[sharename].publicshare)
                            allshares = [];
                            if ("all" in publicshareinfo)
                                allshares = allshares.concat(tolist(publicshareinfo["all"]))
                            if (onemount in publicshareinfo)
                                allshares = allshares.concat(tolist(publicshareinfo[onemount]))
                            allshares.push(username);
                            for (var j in allshares) {
                                var oneshare = allshares[j];
                                // var containerPath = $.grep(["", onemount, oneshare], Boolean).join("/");
                                // var hostPath = $.grep(["/dlwsdata", onemount, oneshare], Boolean).join("/");
                                // Work folder are treated differently.
                                var containerPath = "/" + onemount + "/" + oneshare;
                                var hostPath = "/dlwsdata" + containerPath;
                                var shareType = mountpoints[sharename].type;
                                if (shareType && mountdescription[shareType]) {
                                    description = mountdescription[shareType];
                                }
                                else
                                    description = "Generic Shared File System";
                                mounts = mounts.concat({"containerPath" : containerPath, "hostPath" : hostPath, "description" : description, "enabled": true});
                            };
                        };
                    };
                };
            };
            if (mounthomefolder)
            {
                mounts.unshift({ "containerPath": "/home/" + username, "hostPath": "/dlwsdata/work/" + username, "description": homefolderDescription, "enabled":true });
            }
            return mounts;
        };

        $scope.checkCurrent(); 
        $scope.currentTemplateValue = 0; 
        $scope.lastTemplateValue = -1; 
        $scope.adancedOption = false;

        $scope.ready = $http.get('/api/dlws/GetMountPoints').then(function (response) {
            var mpstring = response.data.mountpoints;
            var mpdescription = response.data.mountdescription;
            $scope.mountpoints = $scope.$eval(mpstring);
            $scope.mountdescription = $scope.$eval(mpdescription);
            $scope.username = response.data.username;
            $scope.mounthomefolder = response.data.mounthomefolder;
            $scope.deploymounts = $scope.$eval(response.data.deploymounts);
            $scope.mounts = parseMounts($scope.mountpoints, $scope.mountdescription, $scope.username, $scope.mounthomefolder, $scope.deploymounts );
            $scope.showMounts = false;
            $scope.showEnv = false;
            $scope.manageTemplate = false; 
            $scope.setMounts(); 
            $scope.checkCurrent(); 
            $log.log($scope.mountpoints);
            $log.log($scope.mountdescription);
        });

        $http.get("/api/dlws/GetTemplates?type=job").then(function (response) {
            $scope.joblist = response.data;
            for (var i = 0; i < $scope.joblist.length; i++)
            {
                var name = $scope.joblist[i].Name;
                var selected = $filter('filter')($scope.joblist, { Name: name });
                if (selected.length == 1)
                    $scope.joblist[i].Text = name; 
                else 
                {
                    var username = $scope.joblist[i].Username.trim();
                    if (username == null || username.length <= 0)
                        $scope.joblist[i].Text = name + "(master)"; 
                    else 
                        $scope.joblist[i].Text = name + "("+username.split('@@')[0]+")"; 
                }

                $scope.joblist[i].Value = i;
            }
            $scope.curtemplateValue = 0;
            $scope.loadTemplate();
            $log.log($scope.joblist);
        });

        $scope.loadTemplate = function () {
            $scope.curtemplate = $scope.joblist[$scope.curtemplateValue];
            $scope.template = {};
            $scope.curTemplateName = $scope.curtemplate.Name;
            $scope.template.useTemplateName = $scope.curTemplateName;
            $scope.curTemplateDatabase = $scope.curtemplate.Database; 
            $scope.curUsername = $scope.curtemplate.Username; 
            $scope.masterFlag = false; 
        };

        $scope.setMounts = function () {
            if ($scope.current == null || $scope.mounts == null )
                return;
            var examinemounts = $scope.current.mountpoints;
            if (examinemounts == null)
                examinemounts = [];
            $scope.current.mountpoints = []
            for (var i = 0; i < $scope.mounts.length - 1; i++)
            {
                var onemount = $scope.mounts[i];
                var selected = $filter('filter')(examinemounts, { hostPath: onemount.hostPath });
                if (selected.length <=0)
                {
                    $scope.current.mountpoints.push(onemount);
                }
                else {
                    $scope.current.mountpoints.push(selected[0]);
                }
            }
        };




        $scope.showTemplate = function () {
            $log.log($scope.curtemplateValue);
            var selected = $filter('filter')($scope.joblist, { Value: $scope.curtemplateValue });
            var showName = "None";
            if ($scope.curtemplateValue > 0 && selected.length)
            {
                if ($scope.lastTemplateValue && $scope.lastTemplateValue == $scope.curtemplateValue)
                {

                }
                else 
                {
                    $scope.lastTemplateValue = $scope.curtemplateValue; 
                    $scope.current = $scope.$eval(selected[0].Json);
                    $scope.loadTemplate(); 
                    $scope.setMounts(); 
                    $scope.checkCurrent(); 
                }                
                showName = selected[0].Text;
            }
            return showName;
        };

        $scope.newEnvironment = function () {
            var cur = $scope.current;
            if (!cur)
            {
                return; 
            }
            if (!(cur.env)) {
                cur.env = [];
            };
            var curenv = cur.env;

            inserted = {
                name: "#name",
                value: "#value"
            };
            curenv.push(inserted);
        };

        $scope.removeItem = function (menuitems, index) {
            menuitems.splice(index, 1);
        };

        $scope.DownloadFile = function (json) {
            var str = JSON.stringify(json);
            var file = new Blob([str], { type: "text/plain" });
            var filename = "Templates.json";
            if (window.navigator.msSaveOrOpenBlob) {
                window.navigator.msSaveOrOpenBlob(file, filename);
            }
            else {
                var a = document.createElement("a");
                var url = URL.createObjectURL(file);
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                setTimeout(function () {
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                },
                    0);
            }
        }

        $scope.toggleMasterFlag = function () {
            $scope.masterFlag = !($scope.masterFlag);
        };

        $scope.getDatabase = function () {
            var loc = "CurrentCluster";
            if ($scope.masterFlag)
                loc = "Master";
            return loc; 
        };

        $scope.DownloadDatabase = function () {
            var loc = $scope.getDatabase(); 
            var params = "location=" + loc + "&";
            var url = "/api/dlws/GetDatabase?" + params;
            $.ajax({ url: url, dataType: 'json', error: $scope.AlertAPIError, timeout: 10000 }).done($scope.DownloadFile);
        };

        $scope.AlertAPIError = function (xhr, ajaxOptions, thrownError) {
            layer.msg("Restful API Error: \n" + JSON.stringify(thrownError));
        };

        $scope.AlertAPIResult = function (payload) {
            layer.msg(payload.message);
        };

        $scope.SaveTemplateAPI = function (params) {
            var url = "/api/dlws/submit";
            $.ajax({ url: url, method: 'POST', data: params, error: $scope.AlertAPIError, timeout: 10000 }).done();
        };

        $scope.processCurrent = function () {
            if (tobool($scope.current, "PSDistJob", false ))
                $scope.current.jobtrainingtype = "PSDistJob";
            else 
                $scope.current.jobtrainingtype = "RegularJob";
            if (!tobool($scope.current, "do_log", false))
            { 
                delete $scope.current.logDir;
            }
            if (!tobool($scope.current, "is_interactive", false)) {
                delete $scope.current.interactivePort;
                console.log("deleted interactivePorts");
            }
        };

        $scope.SaveTemplate = function () {
            $scope.processCurrent();
            var params = {};
            params.Name = $scope.template.useTemplateName;
            params.Json = JSON.stringify($scope.current);
            params.Database = $scope.getDatabase();
            $scope.SaveTemplateAPI(params);
        };

        $scope.submitJob = function () {
            $scope.processCurrent();
            var params = {};
            params.Name = $scope.template.useTemplateName;
            params.Json = JSON.stringify($scope.current);
            params.Database = $scope.getDatabase();
            var url = "/api/dlws/postJob";
            console.log(url);
            $.ajax({
                url: url,
                method: 'POST',
                data: params,
                error: function (xhr, ajaxOptions, thrownError) {
                    layer.msg("RestfulAPI error!");
                    $("#submit").attr("disabled", false);
                },
                timeout: 10000 //10 second timeout
            }).done(
                function (resp) {
                    payload = $scope.$eval(resp);
                    console.log(payload);
                    if (payload.jobId) {
                        layer.msg("Job Submitted! <br> Job ID:" + payload.jobId)
                        location.href = "/Home/ViewJobs";
                    } else if (payload.error) {
                        layer.msg("Error: " + payload.error);
                        $("#submit").attr("disabled", false);
                    } else {
                        layer.msg("Unexpected error: " + payload);
                        $("#submit").attr("disabled", false);
                    };

                });
        };


        $scope.DeleteTemplate = function() {
            var templatename = $scope.curTemplateName;
            if (templatename == "") {
                layer.msg("Unable to delete a null template!");
                return;
            }
            var loc = $scope.getDatabase(); 
            var params = "";
            params = params + "name=" + templatename + "&" + "location=" + loc + "&";
            var url = "/api/dlws/DeleteTemplate?" + params;
            $.ajax({ url: url, dataType: 'json', error: $scope.AlertAPIError, timeout: 10000 }).done($scope.AlertAPIResult);
        }
        
        $scope.UploadDatabase = function () {
            var fileToLoad = document.getElementById("fileInput").files[0];
            var fileReader = new FileReader();
            fileReader.onload = function (fileLoadedEvent) {
                var textFromFileLoaded = fileLoadedEvent.target.result;
                var templateArray = JSON.parse(textFromFileLoaded);
                for (var i = 0, length = templateArray.length; i < length; i++) {
                    var params = {};
                    params.Name = templateArray[i].Name;
                    params.Username = templateArray[i].Username;
                    params.Json = templateArray[i].Json;
                    params.Database = $scope.getDatabase();
                    $scope.SaveTemplateAPI(params);
                }
            }
            fileReader.readAsText(fileToLoad, "UTF-8");
        };

        $scope.ChooseFile = function() {
            $("#fileInput").click();
            $("#fileInput").attr("value", "");
        };

        $scope.chooseValue = function (val, trueChoice, falseChoice, def) {
            var var1 = val;
            if (var1 == null)
                var1 = def;
            if (var1)
                return trueChoice;
            else
                return falseChoice;
        };

        $scope.changeDNSPolicy = function () {
            if ($scope.current.dnsPolicy)
            {
                if ($scope.current.dnsPolicy == "ClusterFirst")
                    $scope.current.dnsPolicy = "ClusterFirstWithHostNet";
                else 
                {
                    delete $scope.current.dnsPolicy;
                }
            }
            else {
                $scope.current.dnsPolicy = "ClusterFirst";
            }
        };
    });
</script>

<div ng-app="jobApp" ng-controller="jobCtrl" class="modal-dialog" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title" id="submitModalLabel">@((ViewData["Mode"].Equals("Templates")) ? "Manage Templates" : "Submit Job")</h4>

            <p> Please click link to edit template. </p>
        </div>

        <div class="modal-body">
            <div class="form-group">
                <label>
                    Job template:
                </label> <br />

                <a href="#" editable-select="curtemplateValue" e-ng-options="g.Value as g.Text for g in joblist">
                    {{ showTemplate() }}
                </a>
            </div>
            <div class="form-group">
                <label>
                    Job Type:
                </label>

                <a href="#" editable-checkbox="current.PSDistJob" e-title="Distributed Job?">
                    {{ current.PSDistJob && "Distributed Job" || "Regular Job" }}
                </a>
            </div>

            <div class="form-group">
                <label>
                    Job Name:
                </label>
                <a href="#" editable-text="current.jobName" e-label="Job Name">
                    {{ current.jobName || "## Click here to change job name ##" }}
                </a>
            </div>

            <div class="form-group">
                <label>
                    Number of GPUs:
                </label>
                <a href="#" editable-number="current.resourcegpu" e-min="0" e-label="Job Name">
                    {{ current.resourcegpu || 0 }}
                </a>
            </div>

            <div ng-if="current.PSDistJob" class="form-group">
                <label>
                    Number of Parameter Servers:
                </label>
                <a href="#" editable-number="current.numps" e-min="0" e-label="# of Parameter Servers">
                    {{ current.numps || 1 }}
                </a>
            </div>
            <div ng-if="current.PSDistJob" class="form-group">
                <label>
                    Number of Workers:
                </label>
                <a href="#" editable-number="current.numpsworker" e-min="0" e-label="# of Workers">
                    {{ current.numpsworker || 1 }}
                </a>
            </div>


            <div class="form-group">
                <label>
                    Docker Image:
                </label>
                <a href="#" editable-text="current.image">{{current.image || " ## Click here to change docker image ##"}} </a>
            </div>

            <div class="form-group">
                <label>
                    Command:
                </label>
                <a href="#" editable-textarea="current.cmd" e-rows="10" e-cols="240" e-style="width: 800px">
                    <pre> {{current.cmd}}</pre>
                </a>
            </div>



            <div class="form-group">
                <label>
                    Interactive Job:
                </label>

                <a ng-class="{true: 'fa fa-check fa-lg text-success', false: 'fa fa-times fa-lg text-danger'}[current.is_interactive]" ng-click="current.is_interactive = !current.is_interactive">
                </a>

            </div>

            <div ng-if="current.is_interactive" class="form-group">
                <label>
                    Ports (separate ports by comma):
                </label>
                <a href="#" editable-text="current.interactivePort" e-title="Ports used.">
                    {{ current.interactivePort || "#ports"}}
                </a>
            </div>

            <div class="form-group">
                <label>
                    Tensorboard:
                </label>

                <a ng-class="{true: 'fa fa-check fa-lg text-success', false: 'fa fa-times fa-lg text-danger'}[current.do_log]" ng-click="current.do_log = !current.do_log">
                </a>

                <div ng-if="current.do_log">
                    <label>Model path:</label>
                    <a href="#" editable-text="current.logDir" e-title="Tensor Model Directory">
                        {{ current.logDir || "#Tensorboard_model_directory" }}
                    </a>
                </div>
            </div>

            <div class="form-group">
                <label>
                    Running as root:
                </label>

                <a ng-class="{'1': 'fa fa-check fa-lg text-success', '0': 'fa fa-times fa-lg text-danger'}[current.runningasroot]" ng-click="toggle01(current,'runningasroot','0')">
                </a>
            </div>
        </div>

        <div class="modal-body">
            <div class="form-group">
                <label>
                    <a class="btn pull-left" ng-class="{true: 'btn-primary', false: 'btn-danger'}[adancedOption]" ng-click="adancedOption = !adancedOption">
                        {{adancedOption && 'Hide Advanced Options' || 'Show Advanced Options' }}
                    </a>
                </label>
            </div>

            <div class="form-group" ng-if="adancedOption && mounts.length > 0 ">
                <label>
                    <a class="btn pull-left" ng-class="{true: 'btn-primary', false: 'btn-danger'}[showMounts]" ng-click="showMounts = !showMounts">
                        {{showMounts && 'Hide Mounted Directories' || 'Show Mounted Directories' }}
                    </a>
                </label>

                <div ng-if="showMounts">
                    <label>
                        Click link to change the mountpoint in container:
                    </label>
                    <div ng-repeat="onemount in current.mountpoints">
                        <label>
                            <a href="#" data-toggle="tooltip" title="Mounted at {{onemount.hostPath}}">
                                <a ng-class="{true: 'fa fa-check fa-lg text-success', false: 'fa fa-times fa-lg text-danger'}[onemount.enabled]" ng-click="onemount.enabled = !onemount.enabled">
                                </a>
                                <a href="#" editable-text="onemount.containerPath">{{onemount.containerPath}} </a> : {{onemount.description}}
                            </a>
                        </label>
                    </div>
                </div>
                <label ng-if="showMounts">
                    Work Directory <font face="verdana" color="#A9A9A9">(relative to <a href="@ViewData["workPath"]">@ViewData["workPath"].ToString().Replace("file:", "").Replace("/", "\\") </a>).  </font> <br /> <font face="verdana" color="#A9A9A9"> This folder is mounted as <b>/work</b> inside container.</font>
                </label>
                <br ng-if="showMounts" />
                <a ng-if="showMounts" href="#" editable-text="current.workPath">{{current.workPath || "." }} </a>

                <label ng-if="showMounts">
                    Data Directory <font face="verdana" color="#A9A9A9">(relative to <a href="@ViewData["dataPath"]">@ViewData["dataPath"].ToString().Replace("file:", "").Replace("/", "\\") </a>). </font> <br /> <font face="verdana" color="#A9A9A9"> This folder is mounted as <b>/data</b> inside container.</font>
                </label>
                <br ng-if="showMounts" />
                <a ng-if="showMounts" href="#" editable-text="current.dataPath">{{current.dataPath || "." }} </a>

                <label ng-if="showMounts">
                    Job Directory (empty by default)  <font face="verdana" color="#A9A9A9"> This folder is mounted as <b>/job</b> inside container.</font>
                </label>
                <br ng-if="showMounts" />
                <a ng-if="showMounts" href="#" editable-text="current.jobPath">{{current.jobPath || "(default_empty)" }} </a>
            </div>


            <div ng-if="adancedOption">
                <label>
                    <a class="btn" ng-class="{true: 'btn-primary', false: 'btn-danger'}[showEnv]" ng-click="showEnv = !showEnv">
                        {{showEnv && 'Hide Environment Variables' || 'Show Environment Variables' }}
                    </a>
                </label>


                <div class="form-group" ng-if="showEnv">
                    <label>
                        Environmet variables:
                    </label>
                    <table>
                        <thead>
                        <th>   </th>
                        <th>   </th>
                        <th>   </th>
                        <th>   </th>
                        </thead>
                        <tbody>
                            <tr ng-repeat="oneenv in current.env">
                                <td>
                                    <a href="#" editable-text="oneenv.name">{{oneenv.name}} </a>
                                </td>
                                <td> = </td>
                                <td>
                                    <a href="#" editable-text="oneenv.value">{{oneenv.value}} </a>
                                </td>
                                <td>
                                    <a class="fa fa-times fa-lg text-danger" ng-click="removeItem(current.env,$index)">
                                    </a>
                                </td>

                            </tr>
                        </tbody>
                    </table>
                    <button type="button" class="btn btn-info" ng-click="newEnvironment()">
                        Add Environment Variable
                    </button>
                </div>

                <div class="form-group">
                    <a class="btn" ng-class="chooseValue(current.isPrivileged,'btn-danger','btn-primary',false)" ng-click="current.isPrivileged = !current.isPrivileged">
                        {{current.isPrivileged && 'Container: Priviledged' || 'Container: Non-Priviledged' }}
                    </a>
                </div>

                <div ng-if="current.isPrivileged" class="form-group">
                    <a class="btn" ng-class="chooseValue(current.hostNetwork,'btn-danger','btn-primary',false)" ng-click="current.hostNetwork = !current.hostNetwork">
                        {{current.hostNetwork && 'Network: Host' || 'Network: Container' }}
                    </a>
                </div>

                <div ng-if="current.isPrivileged" class="form-group">
                    <a class="btn btn-primary" ng-click="changeDNSPolicy()">
                        DNS Policy: {{current.dnsPolicy || 'Host' }}
                    </a>
                </div>

                <div ng-if="current.isPrivileged" class="form-group">
                    <label>
                        CPU Request:
                    </label>
                    <a href="#" editable-text="current.cpurequest" e-title="resource.requests.cpu">
                        {{ current.cpurequest || "#value_of_resources.requests.cpu(default 100m)" }}
                    </a>
                </div>

                <div ng-if="current.isPrivileged" class="form-group">
                    <label>
                        Memory Request:
                    </label>
                    <a href="#" editable-text="current.memoryrequest" e-title="resource.requests.memory">
                        {{ current.memoryrequest || "#value_of_resources.requests.memory(default 0)" }}
                    </a>
                </div>
        </div>
            <div class="modal-footer">
                <a class="btn pull-left" ng-class="{true: 'btn-primary', false: 'btn-danger'}[manageTemplate]" ng-click="manageTemplate = !manageTemplate">
                    {{manageTemplate && 'Hide Template Operations' || 'Show Template Operations' }}
                </a>
                <a class="btn pull-right btn-primary" ng-click="submitJob()">
                    Submit Job
                </a>
            </div>

            <div ng-if="manageTemplate" class="form-group">
                <label > Template Name:</label> <br/>
                <a href="#" editable-text="template.useTemplateName" e-title="Name of Template">
                    {{ template.useTemplateName || "#Template_Name"}}
                </a><br />
                <label>
                    Template Location
                </label> <br />
                <a class="btn" ng-class="{true: 'btn-primary', false: 'btn-danger'}[masterFlag]" ng-click="toggleMasterFlag()">
                    {{masterFlag && 'Master' || 'Current User' }}
                </a>
            </div>


            <div ng-if="manageTemplate" class="modal-footer">
                <a ng-click="DeleteTemplate()" class="btn btn-success" href="#">Delete Template</a>
                <a ng-click="SaveTemplate()" class="btn btn-success" href="#">Save Template</a>
            </div>

            <div ng-if="manageTemplate" class="modal-footer">
                <label>
                    Database operation
                </label>

                <a ng-click="DownloadDatabase()" class="btn btn-success" href="#">Download JSON</a>
                <a ng-click="ChooseFile()" class="btn btn-success" href="#">Upload JSON</a>
            </div>

    </div>

                <div style="height: 0px; overflow: hidden">
                    <input type="file" id="fileInput" name="fileInput" ng-model="fileInput" onchange="angular.element(this).scope().UploadDatabase()" />
                </div>

            </div>




