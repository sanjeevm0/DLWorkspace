@{
    ViewData["Title"] = "Submit Your Job";
}

<script>
    $(document).ready(function () {
        $('#submit_job').on('submit', function (e) { //use on if jQuery 1.7+
            e.preventDefault();  //prevent form from submitting
            var params = "";

            var jobname = $("#jobname").val().trim();
            var workpath = encodeURIComponent($("#workpath").val().trim());
            var datapath = encodeURIComponent($("#datapath").val().trim());
            var jobpath = encodeURIComponent($("#jobpath").val().trim());
            var image = encodeURIComponent($("#image").val().trim());
            var cmd = encodeURIComponent($("#cmd").val().trim());
            var logdir = encodeURIComponent($("#logdir").val().trim());
            var interactiveport = encodeURIComponent($("#interactivePort").val().trim());


            var numGPUsInt = parseInt($('#resourcegpu').val());
            var numGPUStr = $('#resourcegpu').val();


            //var jobtrainingtype = encodeURIComponent($("#jobtrainingtype").val().trim());


            var radios = document.getElementsByName('jobtrainingtype');

            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    var jobtrainingtype = encodeURIComponent(radios[i].value.trim());
                    break;
                }
            }

            var numps = parseInt($('#numps').val());
            var numpsworker = parseInt($('#numpsworker').val());
            var nummpiworker = parseInt($('#nummpiworker').val());


            if (numGPUsInt < 0 || numGPUsInt > 8) {
                alert("Invalid GPU number:" + numGPUStr + ". GPU number has to be 0 - 8 in regular job");
                return;
            }

            if (jobname == "") {
                alert("Job Name cannot be empty!");
                return;
            }
            if (workpath == "") {
                alert("Work Path cannot be empty!");
                return;
            }
            if (datapath == "") {
                alert("Data Path cannot be empty!");
                return;
            }

            if (image == "") {
                alert("Docker Image cannot be empty!");
                return;
            }

            if (cmd == "") {
                alert("Default CMD in docker image:" + image + ". will be executed");
            }

            params = params + "resourcegpu=" + numGPUStr + "&";
            params = params + "jobName=" + jobname + "&";
            params = params + "workPath=" + workpath + "&";
            params = params + "dataPath=" + datapath + "&";

            var jobpath = $('#jobpath').val();
            if (jobpath != "") {
                params = params + "jobPath=" + jobpath + "&";
            }

            params = params + "image=" + image + "&";
            params = params + "cmd=" + cmd + "&";

            var logdir = $('#logdir').val();
            if (logdir != "") {
                params = params + "logDir=" + logdir + "&";
            }

            if (interactiveport != "") {
                params = params + "interactivePort=" + interactiveport + "&";
            }

            params = params + "jobType=training&";
            params = params + "jobtrainingtype=" + jobtrainingtype+"&";

            if (jobtrainingtype == "PSDistJob")
            {
                params = params + "numps=" + numps + "&";
                params = params + "numpsworker=" + numpsworker+"&";
            }

            if (jobtrainingtype == "MPIDistJob") {
                params = params + "nummpiworker=" + nummpiworker + "&";
            }



            var runningasroot = document.getElementById("runningasroot").checked ? "1" : "0";
            params = params + "runningasroot=" + runningasroot + "&";

            var url = "/api/dlws/SubmitJob?" + params;

            console.log(url);
            $("#submit").attr("disabled", true);

            $.ajax({
                url: url,
                dataType: 'json',
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("RestfulAPI error!");
                    $("#submit").attr("disabled", false);
                },
                timeout: 10000 //10 second timeout
            }).done(
                function (payload) {
                    console.log(payload);
                    if (payload.jobId) {
                        alert("Job Submitted! \n Job ID:" + payload.jobId)
                        location.href = "/Home/ViewJobs";
                    } else if (payload.error) {
                        alert("Error: " + payload.error, "Alert");
                        $("#submit").attr("disabled", false);
                    } else {
                        alert("Unexpected error: " + payload, "Alert");
                        $("#submit").attr("disabled", false);
                    }

                });

        });
    });
</script>

<script type="text/javascript">
    function ShowHideDiv(chkbox, divId) {
        var elem = document.getElementById(divId);
        elem.style.display = chkbox.checked ? "block" : "none";
    }
    function ShowRegularJob() {
        var elem1 = document.getElementById("regularJob");
        elem1.style.display = "block";

        var elem2 = document.getElementById("PSDistJob");
        elem2.style.display = "none";

        var elem3 = document.getElementById("MPIDistJob");
        elem3.style.display = "none";
    }
    function ShowPSDistJob() {
        var elem1 = document.getElementById("regularJob");
        elem1.style.display = "none";

        var elem2 = document.getElementById("PSDistJob");
        elem2.style.display = "block";

        var elem3 = document.getElementById("MPIDistJob");
        elem3.style.display = "none";
    }
    function ShowMPIDistJob() {
        var elem1 = document.getElementById("regularJob");
        elem1.style.display = "none";

        var elem2 = document.getElementById("PSDistJob");
        elem2.style.display = "none";

        var elem3 = document.getElementById("MPIDistJob");
        elem3.style.display = "block";
    }

    function UseTemplate(id) {
        if (id == "tensorflow") {
            document.getElementById("jobname").value = "tensorflow-ipython";
            document.getElementById("resourcegpu").value = 1;
            document.getElementById("workpath").value = "@ViewData["userName"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "tensorflow/tensorflow:latest-gpu";
            //document.getElementById("cmd").value = "";
            document.getElementById("cmd").value = "export HOME=/job && jupyter notebook --no-browser --port=8888 --ip=0.0.0.0 --notebook-dir=/";

            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "8888";
            document.getElementById("logdir").value = "";


            document.getElementById("runningasroot").checked = false;
        }
        else if (id == "tensorflowcpu") {
            document.getElementById("jobname").value = "tensorflow-ipython-cpu";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["userName"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "tensorflow/tensorflow:latest";
            //document.getElementById("cmd").value = "";
            document.getElementById("cmd").value = "export HOME=/job && jupyter notebook --no-browser --port=8888 --ip=0.0.0.0 --notebook-dir=/";

            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "8888";
            document.getElementById("logdir").value = "";


            document.getElementById("runningasroot").checked = false;
        }
        else if (id == "tensorflowssh") {
            document.getElementById("jobname").value = "tensorflow-ssh";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["userName"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "tensorflow/tensorflow:latest-gpu";
            document.getElementById("cmd").value = "apt-get update && apt-get install -y openssh-server sudo && addgroup --force-badname --gid  @ViewData["gid"] domainusers && adduser --force-badname --home /home/@ViewData["userName"] --shell /bin/bash --uid @ViewData["uid"]  -gecos '' @ViewData["userName"] --disabled-password --gid @ViewData["gid"] && adduser @ViewData["userName"] sudo && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && mkdir -p /root/.ssh && cat /work/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys && mkdir -p /home/@ViewData["userName"]/.ssh && cat /work/.ssh/id_rsa.pub >> /home/@ViewData["userName"]/.ssh/authorized_keys && service ssh restart && sleep infinity";
            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "22";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = true;

        }
        else if (id == "caffe") {
            document.getElementById("jobname").value = "caffe-ipython";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["userName"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "bvlc/caffe:cpu";
            //document.getElementById("cmd").value = "pip install jupyter && jupyter notebook --no-browser --port=8889 --allow-root --ip=0.0.0.0 --notebook-dir=/work";
            document.getElementById("cmd").value = "apt-get update && apt-get install -y python-pip sudo && addgroup --force-badname --gid  @ViewData["gid"] domainusers && adduser --force-badname --home /home/@ViewData["userName"] --shell /bin/bash --uid @ViewData["uid"]  -gecos '' @ViewData["userName"] --disabled-password --gid @ViewData["gid"] && pip install jupyter && cd /home/@ViewData["userName"] && sudo -H -u @ViewData["userName"] jupyter notebook --no-browser --port=8889 --ip=0.0.0.0 --notebook-dir=/";




            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "8889";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = true;

        }
        else if (id == "caffessh") {
            document.getElementById("jobname").value = "caffe-ssh";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["userName"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "bvlc/caffe:cpu";
            document.getElementById("cmd").value = "apt-get update && apt-get install -y openssh-server sudo && addgroup --force-badname --gid  @ViewData["gid"] domainusers && adduser --force-badname --home /home/@ViewData["userName"] --shell /bin/bash --uid @ViewData["uid"]  -gecos '' @ViewData["userName"] --disabled-password --gid @ViewData["gid"] && adduser @ViewData["userName"] sudo && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && mkdir -p /root/.ssh && cat /work/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys && mkdir -p /home/@ViewData["userName"]/.ssh && cat /work/.ssh/id_rsa.pub >> /home/@ViewData["userName"]/.ssh/authorized_keys && service ssh restart && sleep infinity";
            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "22";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = true;

        }
        else if (id == "caffesample")
        {
            document.getElementById("jobname").value = "caffe training example - resnet18";
            document.getElementById("resourcegpu").value = 1;
            document.getElementById("workpath").value = "samples";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "bvlc/caffe:gpu";
            document.getElementById("cmd").value = "caffe train -solver /work/caffe/solver_resnet18.prototxt";

            document.getElementById("chkLogDir").checked = false;
            document.getElementById("chkInteractiveJob").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = false;

        }
        else if (id == "tensorflowsample") {
            document.getElementById("jobname").value = "Tensorflow training example - inception";
            document.getElementById("resourcegpu").value = 1;
            document.getElementById("workpath").value = "samples";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "tensorflow/tensorflow:0.12.1-gpu";
            document.getElementById("cmd").value = "/work/tensorflow/models/inception/bazel-bin/inception/imagenet_train --num_gpus=1 --batch_size=32 --train_dir=/job/model --data_dir=/data/tensor";

            document.getElementById("chkLogDir").checked = false;
            document.getElementById("chkInteractiveJob").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = false;

        }
        else if (id == "cntkipython") {
            document.getElementById("jobname").value = "CNTK-ipython";
            document.getElementById("resourcegpu").value = 0;
            document.getElementById("workpath").value = "@ViewData["userName"]";
            document.getElementById("datapath").value = "imagenet";
            document.getElementById("jobpath").value = "";

            document.getElementById("image").value = "microsoft/cntk";
            //document.getElementById("cmd").value = "pip install jupyter && jupyter notebook --no-browser --port=8889 --allow-root --ip=0.0.0.0 --notebook-dir=/work";
            document.getElementById("cmd").value = "bash -c 'source \"/cntk/activate-cntk\" ; jupyter notebook --no-browser --port=8889 --ip=0.0.0.0 --notebook-dir=/ --allow-root'";


            document.getElementById("chkInteractiveJob").checked = true;
            document.getElementById("chkLogDir").checked = false;
            ShowHideDiv(document.getElementById("chkInteractiveJob"), 'interactiveportfield')
            ShowHideDiv(document.getElementById("chkLogDir"), 'logdirfield')

            document.getElementById("interactivePort").value = "8889";
            document.getElementById("logdir").value = "";
            document.getElementById("runningasroot").checked = true;

        }
    }
</script>

<br />
<br />
<div class="modal-dialog" role="document">
    <div class="modal-content">
        <form method="POST" id="submit_job">

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="submitModalLabel">Submit Job</h4>
            </div>

            <div class="modal-body">



                <div class="form-group">
                    <label>
                        Use Template
                    </label>
                    <br />
                    <select onchange="UseTemplate(this.value)"> 
                        <option value="none">None</option>
                        <option value="tensorflow">Tensorflow-IPython-GPU</option>
                        <option value="tensorflowcpu">Tensorflow-IPython-CPU</option>
                        <option value="tensorflowssh">Tensorflow-SSH</option>
                        <option value="caffe">Caffe-IPython</option>
                        <option value="caffessh">Caffe-SSH</option>
                        <option value="caffesample">Caffe training example</option>
                        <option value="tensorflowsample">Tensorflow training example</option>
                        <option value="cntkipython">CNTK-IPython</option>
                        
                    </select>

                </div>
                <div class="form-group" hidden>
                    <label>
                        Job Type
                    </label>
                    <br/>
                    <input type="radio" name="jobtrainingtype" id="jobtrainingtype" value="RegularJob" checked="checked"  onclick="ShowRegularJob()" /> Regular Training Job  <br />
                    <input type="radio" name="jobtrainingtype" id="jobtrainingtype" value="PSDistJob" onclick="ShowPSDistJob()" /> Distributed Training Job (Parameter Server)  <br />
                    <input type="radio" name="jobtrainingtype" id="jobtrainingtype" value="MPIDistJob"  onclick="ShowMPIDistJob()"/> Distributed Training Job (MPI)    <br />
                </div>

                <div class="form-group">
                    <label>
                        Job Name
                    </label>
                    <input type="text" class="form-control" id="jobname" />
                </div>

                <div id="regularJob">
                    <div class="form-group">
                        <label>
                            Number of GPUs to use
                        </label>
                        <input type="number" class="form-control" id="resourcegpu" value="1" />
                    </div>
                </div>


                <div id="PSDistJob" hidden>
                    <div class="form-group">
                        <label>
                            Number of GPUs per worker
                        </label>
                        <input type="number" class="form-control" id="resourcegpu" value="1" />
                    </div>
                    <div class="form-group">
                        <label>
                            Number of Parameter Servers
                        </label>
                        <input type="number" class="form-control" id="numps" value="1" />
                    </div>
                    <div class="form-group">
                        <label>
                            Number of Workers
                        </label>
                        <input type="number" class="form-control" id="numpsworker" value="1" />
                    </div>
                </div>

                <div id="MPIDistJob" hidden>
                    <div class="form-group">
                        <label>
                            Number of GPUs per worker
                        </label>
                        <input type="number" class="form-control" id="resourcegpu" value="1" />
                    </div>
                    <div class="form-group">
                        <label>
                            Number of Workers
                        </label>
                        <input type="number" class="form-control" id="nummpiworker" value="1" />
                    </div>
                </div>

                <div class="form-group">
                    <label>
                        Work Directory <font face="verdana" color="#A9A9A9">(relative to <a href="@ViewData["workPath"]">@ViewData["workPath"].ToString().Replace("file:", "").Replace("/", "\\") </a>)</font>
                    </label>
                    <input type="text" class="form-control" id="workpath" />

                    
                </div>

                <div class="form-group">
                    <label>
                        Data Directory <font face="verdana" color="#A9A9A9">(relative to <a href="@ViewData["dataPath"]">@ViewData["dataPath"].ToString().Replace("file:", "").Replace("/", "\\") </a>)</font>
                    </label>
                    <input type="text" class="form-control" id="datapath" />
                </div>

                <div class="form-group">
                    <label>
                        Job Directory (empty by default)
                    </label>
                    <input type="text" class="form-control" id="jobpath" />
                </div>

                <div class="form-group">
                    <label>
                        Docker Image
                    </label>
                    <input type="text" class="form-control" id="image" />
                </div>

                <div class="form-group">
                    <label>
                        Training Command
                    </label>
                    <input type="text" class="form-control" id="cmd" />
                </div>

                <div class="form-group">
                    <input type="checkbox" id="chkLogDir" onclick="ShowHideDiv(this,'logdirfield')" />
                    <label>
                        Enable TensorBoard
                    </label>
                    <div id="logdirfield" hidden>
                        <label>Model path:</label>
                        <input type="text" class="form-control" id="logdir" />
                    </div>
                </div>

                <div class="form-group">
                    <input type="checkbox" id="chkInteractiveJob" onclick="ShowHideDiv(this, 'interactiveportfield')" />
                    <label>
                        Interactive Job? (e.g. ipython, ssh)
                    </label>
                    <div id="interactiveportfield" hidden>
                        <label>Port used by interactive job:</label>
                        <input type="text" class="form-control" id="interactivePort" />
                    </div>
                </div>

                <div class="form-group">
                    <input type="checkbox" id="runningasroot" />
                    <label>
                        Running as ROOT. (e.g. for ssh jobs)
                    </label>
                </div>

            </div>
            <div class="modal-footer">
                <input type="submit" value="Submit" name="submit" class="btn btn-success" id="submit" />
            </div>
        </form>
    </div>
</div>
