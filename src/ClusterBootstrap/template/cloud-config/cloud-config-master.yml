#cloud-config
coreos:
  update:
    reboot-strategy: off
  units:
    # There should be exactly 4 spaces before
    - name: update-engine.service
      command: stop
    - name: locksmithd.service
      command: stop
    - name: reportcluster.service
      command: start
      content: |
        [Unit]
        Description=Report node to cluster portal
        After=network-online.target
        Requires=network-online.target
        [Service]
        #RemainAfterExit=true
        Restart=always
        RestartSec=60s
        ExecStart=/bin/bash /opt/report.sh
        [Install]
        WantedBy=local.target
    - name: nvidia-driver.service
      command: start
      content: |
        [Unit]
        Description=Install Nvidia driver
        After=local-fs.target network.target
        Wants=docker.service 
        [Service]

        Environment=IMG={{cnf["nvidiadriverdocker"]}} CNAME=nvidia-driver

        RemainAfterExit=yes
        Restart=on-failure
        RestartSec=10
        TimeoutStartSec=1200
        TimeoutStopSec=120

        ExecStartPre=/bin/bash -c 'if lspci | grep -qE "[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F].[0-9] (3D|VGA compatible) controller: NVIDIA Corporation.*"; then /usr/bin/docker inspect $IMG &> /dev/null || /usr/bin/docker pull $IMG ; else exit 0 ; fi'
        ExecStartPre=/bin/bash -c 'if lspci | grep -qE "[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F].[0-9] (3D|VGA compatible) controller: NVIDIA Corporation.*"; then /usr/bin/docker rm $CNAME &> /dev/null; exit 0 ; else exit 0 ; fi'
        ExecStartPre=/bin/bash -c 'if lspci | grep -qE "[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F].[0-9] (3D|VGA compatible) controller: NVIDIA Corporation.*"; then docker run --name $CNAME --privileged -v /opt/nvidia-driver:/opt/nvidia-driver -v /opt/bin:/opt/bin -v /dev:/dev $IMG && mkdir -p /etc/ld.so.conf.d/  && tee /etc/ld.so.conf.d/nvidia-ml.conf <<< /opt/nvidia-driver/current/lib64  && ldconfig ; else exit 0 ; fi'
        ExecStart=/bin/true

        [Install]
        WantedBy=multi-user.target


    - name: nvidia-docker.service
      command: start
      content: |
        [Unit]
        Description=NVIDIA Docker plugin
        After=local-fs.target network.target nvidia-driver.service
        Wants=docker.service nvidia-driver.service
        [Service]
        Environment="SOCK_DIR=/var/lib/nvidia-docker"
        Environment="SPEC_FILE=/etc/docker/plugins/nvidia-docker.spec"
        Environment="NVIDIA_VERSION={{cnf["nvidiadriverversion"]}}"

        Restart=on-failure
        RestartSec=10
        TimeoutStartSec=0
        TimeoutStopSec=20


        ExecStartPre=/bin/bash -c 'if [ ! -f /opt/bin/nvidia-docker ]; then wget -q -O - /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker_1.0.1_amd64.tar.xz | sudo tar --strip-components=1 -C /opt/bin -Jxvf - ; fi'
        ExecStartPre=/bin/bash -c 'if lspci | grep -qE "[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F].[0-9] (3D|VGA compatible) controller: NVIDIA Corporation.*"; then until [ -f /proc/driver/nvidia/version ] && grep -q $NVIDIA_VERSION /proc/driver/nvidia/version && lsmod | grep -qE "^nvidia" && [ -e /dev/nvidia0 ] && [ -e /opt/nvidia-driver/current/lib64/libnvidia-ml.so ] ; do /bin/echo "waiting for nvidia-driver..." ; /bin/sleep 2 ; done else exit 0 ; fi'
        ExecStartPre=/bin/bash -c 'docker volume rm nvidia_driver_$NVIDIA_VERSION ; exit 0'
        ExecStart=/bin/bash -c 'if lspci | grep -qE "[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F].[0-9] (3D|VGA compatible) controller: NVIDIA Corporation.*"; then PATH=$PATH:/opt/bin /opt/bin/nvidia-docker-plugin -s $SOCK_DIR ; else exit 0 ; fi'
        ExecStartPost=/bin/bash -c '/bin/mkdir -p $( dirname $SPEC_FILE ) ; exit 0'
        ExecStartPost=/bin/bash -c '/bin/echo unix://$SOCK_DIR/nvidia-docker.sock > $SPEC_FILE ; exit 0'
        ExecStopPost=/bin/bash -c '/bin/rm -f $SPEC_FILE ; exit 0'
        ExecStopPost=/bin/bash -c '/bin/rm /opt/nvidia-docker-plugin.log ; exit 0'
        ExecStopPost=/bin/bash -c 'docker volume rm nvidia_driver_$NVIDIA_VERSION ; exit 0'

        [Install]
        WantedBy=multi-user.target

    - name: rpc-statd.service
      command: start
      enable: true
    - name: {{cnf["storage-mount-path-name"]}}.mount
      command: start
      enable: true
      content: |
        [Mount]
        What={{cnf["nfs-server"]}}
        Where={{cnf["storage-mount-path"]}}
        Type=nfs
        [Install]
        WantedBy = multi-user.target

{{cnf["coreosunits"]}}

ssh_authorized_keys:
  - {{cnf["sshkey"]}}

write_files:
  # There should be exactly 2 spaces before
  - path: "/opt/homeinserver"
    permissions: "0755"
    owner: "core"
    content: |
      {{cnf["homeinserver"]}}
      
  - path: "/opt/homeininterval"
    permissions: "0755"
    owner: "core"
    content: |
      {{cnf["homeininterval"]}}
      
  - path: "/opt/discoverserver"
    permissions: "0755"
    owner: "core"
    content: |
      {{cnf["discoverserver"]}}

  - path: "/opt/systemrole"
    permissions: "0755"
    owner: "core"
    content: |
      master

  - path: "/opt/report.sh"
    permissions: "0755"
    owner: "root"
    encoding: "base64"
    content: |
      {{cnf["report.sh"]}}
{{cnf["coreoswritefiles"]}}